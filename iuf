#!/usr/bin/env python3

# Copyright 2022 Hewlett Packard Enterprise Development LP

"""The Compute Node Environment (CNE) Installer"""

import argparse
import atexit
import logging
import os
import shutil
import sys
import traceback

import yaml

from lib.vars import *
from lib.InstallLogger import *

from lib.InstallerUtils import elapsed_time
from lib.InstallerUtils import formatted
from lib.InstallerUtils import print_table
from lib.ConfigFile import ConfigFile
from lib.ConfigFile import InvertableArgument
import lib.Config
import lib.Activity

# Import lib.stages without the 'as stages' to prevent namespace collisions.
import lib.stages

import yaml

# pylint: disable=consider-using-f-string

install_logger = get_install_logger()

def validate_stages(config):
    """Validate that all of the various stage related args passed in are valid"""

    # load all of the stage variables
    begin_stage = config.args.get('begin_stage')
    end_stage = config.args.get('end_stage')
    run_stages = config.args.get('run_stages')
    skip_stages = config.args.get('skip_stages')
    state_dir = config.args.get('state_dir')

    config.stages.validate(state_dir, begin_stage, end_stage, run_stages, skip_stages)
    local_stages = config.stages.get(all_stages=False, list_fmt=True)
    if config.args.get("func", "") in [process_install, process_restart, process_resume]:
        install_logger.info("STAGE SUMMARY: begin_stage=%s, end_stage=%s", config.stages.beginStage, config.stages.endStage)
        if "update-vcs-config" in local_stages:

            sp_passed = False
            if "site_parameters" in config.args and config.args["site_parameters"]:
                sp_path = config.args["site_parameters"]
                sp_passed = True
            else:
                sp_path = os.path.join(IUF_BASE_DIR, "site-parameters.yaml")

            if not os.path.exists(sp_path):
                msg = formatted("""
                    The `--site-parameters` file  cannot be found. Please
                    specify the location or place it at {}""".format(
                    os.path.join(IUF_BASE_DIR, "site-parameters.yaml")))
                print(msg)
                sys.exit(1)
            with open(sp_path, "r") as fhandle:
                site_params = yaml.load(fhandle, yaml.SafeLoader)
                if "target_branches" in site_params and site_params["target_branches"]:
                    config.args["target_branches"] = site_params["target_branches"]

    # Ensure that if a `sat bootprep` config was specified (and the stage
    # is being run) it exists.
    bp_config = config.args.get("bootprep_config_managed", None)
    if bp_config and "managed-nodes-rollout" in local_stages:
        for entry in bp_config:
            # print('cn',entry)
            if not os.path.exists(entry):
                print("--bootprep-config-managed-nodes {} was specified but could not be found".format(entry))
                sys.exit(1)

    bp_config = config.args.get("bootprep_config_management", None)
    if bp_config and "management-nodes-rollout" in local_stages:
        for entry in bp_config:
            # print('ncn',bp_config)
            if not os.path.exists(entry):
                print("--bootprep-config-management-nodes {} was specified but could not be found".format(entry))
                sys.exit(1)

    return

def process_activity(config):
    state = config.args.get("state", None)
    if state:
        try:
            config.activity.state(
                timestamp=config.args.get("time", None),
                sessionid=config.args.get("sessionid", None),
                status=config.args.get("status", "n/a"),
                comment=config.args.get("comment", None),
                state=state,
                create=config.args.get("create", False)
            )
        except Exception as e:
            install_logger.error(f"{e}")
            install_logger.debug(traceback.format_exc())
            sys.exit(1)

    print(config.activity)

def process_install(config, start_at=None):
    """Run the install"""

    config.activity.create_activity(config)

    all_stages = config.stages.get(list_fmt=True, all_stages=True)
    exec_stages = config.stages.get(list_fmt=True, all_stages=False)
    start = True if start_at == None else False

    config.stages.set_summary("activity_session", config.args.get("activity_session"))
    config.stages.set_summary("media_dir", config.args.get("media_dir"))
    config.stages.set_summary("log_dir", config.args.get("log_dir"))
    for stage in all_stages:
        if stage != start_at and start == False:
            continue
        elif stage == start_at:
            start = True
        if stage in exec_stages:
            install_logger.info("BEGINNING STAGE: {}".format(stage))
            # a logging message using exc_info must be the very first thing called after the except
            # block starts, so I can't make all these decisions there
            if config.stages.abortable(stage):
                log_level = LOG_LEVELS["ERROR"]
            else:
                log_level = LOG_LEVELS["WARNING"]

            session = config.activity.run_stage(config, stage)
            install_logger.debug("STAGE SESSION: {}".format(session))


    install_logger.info("Install completed in {}".format(elapsed_time(config.stages.installer_start)))
    summary = config.stages.get_summary()
    dashes = "----------------"
    print("{}\n{}\n{}".format(dashes, summary, dashes))


def process_list(config): #pylint: disable=unused-argument
    """Process the arguments to the list subparser"""

    if config.args.get("format", None) == "csv":
        all_stages = ','.join(config.stages.get(long=True, status=True, all_stages=True, list_fmt=True))
        summary = None
    else:
        all_stages = config.stages.get(long=True, status=True, all_stages=True, list_fmt=False)
        summary = config.stages.get_summary(load=True)

    print(all_stages)
    if summary:
        print(summary)


def process_debug_level(config):

    install_logger_file_init(config)
    if config.args.get("level", None):
        if config.args["level"] in LOG_LEVELS.keys():
            level = LOG_LEVELS[config.args["level"]]
            install_logger_stream_init(level, config.args.get("verbose", False))
        else:
            # when this runs we don't have a logger yet, just print and exit
            print("ERROR: Unrecognized log level: {}".format(config.args["level"]))
            sys.exit(1)
    else:
        install_logger_stream_init(verbose=config.args.get("verbose", False))

    log_dir_base = config.args["log_dir"]
    log_dir = os.path.join(log_dir_base, config.timestamp)
    if "func" in config.args and config.args["func"] == process_install:
        install_logger.info("All logs will be stored in {}".format(log_dir))
    return

def get_comment(text_or_list):
    """Take an list or a string and return it as a string."""
    comment = None
    if text_or_list and type(text_or_list) is list:
        comment = " ".join(text_or_list)
    elif text_or_list:
        comment = text_or_list

    return comment

def process_resume(config):
    """Pick up where we left off."""
    comment = get_comment(config.args.get("comment", None))
    activity = config.args.get("activity_session")
    config.stages.set_summary("comment", comment)
    text = ""

    stage_status = config.stages.get_stage_status(activity)
    last_success = None
    unpaused_stage = False
    next_stage = None
    last_list_index = len(stage_status) - 1
    for ctr, stagedict in enumerate(stage_status):
        stage = stagedict["stage"]
        run_status = config.stages.run_status(stage)
        if run_status.lower() == 'paused':
            # Unpause this stage.
            unpaused_stage = stage
            break
        elif stagedict["succeeded"] is True:
            last_index = ctr + 1  if ctr + 1  <= last_list_index else ctr
            next_stage = stage_status[last_index]["stage"]

    start_at = None
    activity_dir = os.path.join(ACTIVITY_BASE_DIR, activity)
    if unpaused_stage:
        start_at = unpaused_stage
        process_install(config, start_at=unpaused_stage)
    elif next_stage:
        process_install(config, start_at=next_stage)
    else:
        print("Couldn't find a successful or paused stage to resume at.")
        sys.exit(1)


def process_restart(config):
    """Remove the files associated with this activity and start over."""
    comment = get_comment(config.args.get("comment", None))

    # Remove the files in state_dir.
    state_dir = config.args.get("state_dir")
    for file in os.listdir(state_dir):
        fpath = os.path.join(state_dir, file)
        if os.path.isfile(fpath):
            os.unlink(fpath)

    # Remove the directories in media_dir.
    media_dir = config.args.get("media_dir")
    for file in os.listdir(media_dir):
        fpath = os.path.join(media_dir, file)
        if os.path.isdir(fpath):
            shutil.rmtree(fpath)
    config.stages.set_summary("comment", comment)
    config.stages.set_summary("ran_stages", "")
    process_install(config)


def process_abort(config):
    """Kill the running processes and abort the run."""
    # I dont think we can implement this until we know what processes are
    # being killed, etc.
    pass


def update_logger_config(config):
    """
    Sets the static CmdInterface interface to "dryrun" mode
    """
    if config.dryrun:
        addLoggingLevel('DRYRUN', logging.INFO + 1)
        install_logger.dryrun("Dryrun enabled")

    addLoggingLevel('TRACE', logging.DEBUG - 1)

def check_environment_variables():
    """
    Go over a list of variables that we don't want set and remove them
    """

    CLEAN_ENV = [
        "CRAY_FORMAT",
    ]

    for var in CLEAN_ENV:
        if var in os.environ:
            del os.environ[var]

def log_state_files(config):
    if not hasattr(config, "args"):
        return
    log_dir_base = config.args["log_dir"]
    logdir = os.path.join(log_dir_base, config.timestamp)
    if hasattr(config, "location_dict"):
        if os.path.exists(config.location_dict_file):
            shutil.copy2(config.location_dict_file, logdir)
    if hasattr(config, "stages_file"):
        if os.path.exists(config.stages_file):
            shutil.copy2(config.stages_file, logdir)


def main():
    """Main entry point."""
    check_environment_variables()
    config = lib.Config.Config()

    parser = argparse.ArgumentParser(description=
        """
       The CSM Install and Upgrade Framework (IUF) Installer.
        """
    )

    parser.add_argument("-i", "--input-file", action="store", help="""Input
        file used to control the install.   Command line arguments will
        override what is in the file.
        Input file should be YAML.
        Can also be set via the IUF_INPUT_FILE environment variable.""")

    parser.add_argument("-w", "--write-input-file", action="store_true",
        help="""Write out a new config file to the input file specified with defaults+
        any command line options specified and quit.""")

    ### TODO, make default value product_vars.yaml 'recipe', fallback to pwd
    parser.add_argument("-a", "--activity-session", action="store",
        help="""Activity session name.  Must be a unique identifier.
        Session names must only contain letters (A-Za-z), numbers (0-9), periods (.), and dashes (-).
        Can also be set via the IUF_ACTIVITY_SESSION environment variable.""")

    parser.add_argument("-b", "--base-dir", action="store",
        help="""Base directory for state and log dirs.  Default is ${RSM_BASE_DIR}/iuf/<activity-session>""")

    parser.add_argument("-s", "--state-dir", action="store",
        help="A directory used to store the current state of stages.  Defaults to [base-dir]/state.")

    #### TODO handle both directories or list of files
    parser.add_argument("-m", "--media-dir", action="store",
        help="Location of installation media you would like to install.  Defaults to $RBD_BASE_DIR/{activity_session}")

    parser.add_argument("-sp", "--site-parameter", action="store", default=False,
        help="Path the the site.yaml parameter config.")

    parser.add_argument("--log-dir", action="store",
        help="Location used to store log files.  Defaults to [base-dir]/log")

    # hide DRYRUN for now until it's production ready
    parser.add_argument("--dryrun", action=InvertableArgument, default=False, help=argparse.SUPPRESS)

    levelhelp = list(LOG_LEVELS.keys())
    levelhelp.remove('DRYRUN')
    parser.add_argument("-l", "--level", action="store", default='INFO',
        help="Set the debug level to the console", choices=levelhelp)

    parser.add_argument("-v", "--verbose", action="store_true",
        help="Generates more verbose messages")

    # TODO: The stage-dir usage could use more verbiage. We might want to add
    # this to the install docs.  Describing it in detail in the help section
    # might be inappropriate.  Essentially, we need it because not all the stages
    # are fully independent; for example, we have an unpack stage, and an
    # install stage.  The install stage needs to install what was unpacked.

    subparsers = parser.add_subparsers(title="subcommands", metavar='{run,activity,list-stages|ls,list-products|resume|restart|abort}')
    stage_list = lib.stages.get_stage_help()

    install_sp = subparsers.add_parser("run", epilog="Valid stages:\n{}".format(stage_list),
        formatter_class=argparse.RawTextHelpFormatter)

    install_sp.add_argument("-b", "--begin-stage", action="store",
        help="The first stage to execute")

    install_sp.add_argument("-e", "--end-stage", action="store",
        help="The last stage to execute")

    install_sp.add_argument("-r", "--run-stages", nargs="+", action="store",
        help="Run only the specified stages")

    install_sp.add_argument("-s", "--skip-stages", nargs="+", action="store",
        help="Skip the execution of the specified stages")

    install_sp.add_argument("-F", "--force", action="store", default=False,
        help="Force re-execution of stage operations.")

    install_sp.add_argument("-sp", "--site-parameters", action="store",
        help="Path to site parameters file.  Default is ${RSM_BASE_DIR}/$IUF_ACTIVITY_SESSION}/site_parameters.yaml")

    bpc_help = formatted("""
    List of `sat bootprep` config files for non-mgmt nodes (compute, UAN).""")

    install_sp.add_argument("-bc", "--bootprep-config-managed", action="store", nargs='+',
        #default = ['../vcs/bootprep/compute-and-uan-bootprep.yaml'],
        help=bpc_help)

    bpc_help = formatted("""
    List of `sat bootprep` config files for management NCN nodes.""")

    install_sp.add_argument("-bm", "--bootprep-config-management", action="store",
        #default = ['../vcs/bootprep/management-bootprep.yaml'],
        help=bpc_help)

    install_sp.add_argument("-um", "--update-method-management", action="store",
        default="reboot",
        help="Method to update the management nodes.  (rolling) 'reboot' or (rolling) 'in_place' (update running nodes).  Defaults to 'reboot'")

    install_sp.add_argument("-uc", "--update-method-managed", action="store",
        default="reboot",
        help="Method to update the managed nodes.  (rolling) 'reboot' or (rolling) 'in_place' (update running nodes).  Defaults to 'reboot'")

    install_sp.add_argument("-ln", "--limit-nodes", action="store", nargs='+',
        help="""Override list used in rolling stage to assist with repairing broken nodes.
For example, --limit-nodes ncn-w003 would cause the rollout stage to only
reload ncn-w003;  --limit-nodes x3000c0s37b0n0 would also work.
""")

    install_sp.set_defaults(func=process_install, skip_stages=list(), run_stages=list())

    list_sp = subparsers.add_parser("list-stages", aliases=["ls"])
    list_sp.set_defaults(func=process_list)
    list_sp.add_argument("-f", "--format", action="store")

    install_sp = subparsers.add_parser("activity",
        formatter_class=argparse.RawTextHelpFormatter)

    # create a config object to store all of the configured options in the parser

    resume_sp = subparsers.add_parser("resume")
    resume_sp.set_defaults(func=process_resume)
    resume_sp.add_argument("comment", action="store", nargs="*")

    restart_sp = subparsers.add_parser("restart")
    restart_sp.set_defaults(func=process_restart)
    restart_sp.add_argument("comment", action="store", nargs="*")

    abort_sp = subparsers.add_parser("abort")
    abort_sp.set_defaults(func=process_abort)
    abort_sp.add_argument("comment", action="store", nargs="*")

    activity_sp = subparsers.add_parser("activity")
    activity_sp.add_argument("--comment", help="Comment for the activitiy state", action="store")
    activity_sp.add_argument("--time", help="Add or edit state at a specific timestamp, defaults to now.", action="store")
    activity_sp.add_argument("--create", help="Create a new activity state", action="store_true", default=False)
    activity_sp.add_argument("--status", help="Current status of the state", action="store", default="n/a", choices=lib.Activity.ACTIVITY_VALID_STATUS )
    activity_sp.add_argument("--sessionid", help="Argo sessionid.", default=None)
    activity_sp.add_argument("state", nargs="?", help="State name", action="store", default=None, choices=lib.Activity.ACTIVITY_VALID_STATES)

    activity_sp.set_defaults(func=process_activity)

    configfile = ConfigFile()
    configfile.load_parser_defaults(parser)

    # allow the input file to be defined by environment variable
    env_input_file = os.getenv("IUF_INPUT_FILE", None)
    if env_input_file:
        parser.set_defaults(input_file=env_input_file)

    # parse the arguments once to get input file
    tmp_args = parser.parse_args()

    # load any defaults from the input file
    configfile.set_defaults(parser,vars(tmp_args))

    # allow the activity session to be defined in the environment
    env_session = os.getenv("IUF_ACTIVITY_SESSION", None)
    if env_session:
        parser.set_defaults(activity_session=env_session)

    # parse the command line for real
    args = parser.parse_args()

    # Check this before we do anything else so we get a reasonable error message
    if not args.activity_session:
        print("ERROR: --activity-session is required.")
        parser.print_help(sys.stderr)
        sys.exit(1)

    # Convert the args to a dict, and use that rather than the argparse
    # object.  This is so that we have a dictionary of all options, so that
    # we can more easily determine which values can be passed via an input
    # deck.
    config.args = vars(args)

    process_debug_level(config)
    update_logger_config(config)
    install_logger.debug(config.args)

    config_error = False

    if not lib.Activity.valid_activity_name(args.activity_session):
        install_logger.error(f"Activity session {args.activity_session} invalid.  Names must only contain letters, numbers, periods, and dashes")
        config_error = True

    if len(sys.argv) < 2:
        install_logger.error("{} requires at least 1 argument".format(sys.argv[0]))
        config_error = True

    if config_error:
        parser.print_help(sys.stderr)
        sys.exit(1)

    config.stages = lib.stages.Stages(stage_dict=STAGE_DICT, state_dir=config.args["state_dir"])
    validate_stages(config)

    if config.args["write_input_file"]:
        configfile.write(config.args)

    atexit.register(log_state_files, config)

    try:
        args.func(config)
    except AttributeError:
        install_logger.error("A subcommand was not specified.")
        parser.print_help(sys.stderr)
        sys.exit(1)
if __name__ == "__main__":
    main()
